package com.securevault.passwordmanager;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /user (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @Autowired
  private BCryptPasswordEncoder bCryptPasswordEncoder; // Correctly autowire the BCryptPasswordEncoder bean

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String firstName
      , @RequestParam String lastName, @RequestParam String password, @RequestParam String email,
      @RequestParam Boolean isPersonalAccount, @RequestParam Long orgId) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    // If there is a user that already has that email, don't create them.
    // Else, create them.
    if(userRepository.findByEmail(email) != null) {
      return "A user with the email " + email + " already exists.";
    } else {
      User n = new User();
      n.setFirstName(firstName);
      n.setLastName(lastName);
      n.setPersonalAccount(isPersonalAccount);
      // n.setPassword(password); // Need to figure out if we hash in backend or frontend before POST request
      // n.setPassword(bCryptPasswordEncoder.encode(password));
      String hashedPassword = bCryptPasswordEncoder.encode(password);
      System.out.println("Hashed password: " + hashedPassword);
      n.setPassword(hashedPassword);
      n.setEmail(email);
  
      // If the account is not a personal account, set the orgId
      if(!n.isPersonalAccount()) {
        n.setOrgId(orgId);
      }
  
      userRepository.save(n);
      return "saved";
    }
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
}
